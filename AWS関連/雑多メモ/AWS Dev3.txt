～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB
プロビジョニングモードの読み込みキャパシティユニットと書き込みキャパシティユニット

トランザクションの読み込み毎秒100アイテム
各アイテムサイズ５KB
	→400の読み込みキャパシティユニット（RCU）が必要

トランザクション読み込みリクエストは４KBまでの項目を1秒あたりに1回読み込むのに読み込みキャパシティユニットが2個必要である→２RCU

５KBは８KB内に丸められるため読み込みキャパシティユニットが2個必要

よって100アイテム x (2RCU+2RCU) =400RCU

※プロビジョニングモードの読み込みキャパシティユニットと書き込みキャパシティユニット１つの読み込みキャパシティユニットは最大サイズ４KBの項目について1秒当たり1回の
強力な整合性のある読み込み、あるいは1秒当たり3回の結果整合性のある読みこみを表す。
トランザクション読み込みリクエストでは
４KBまでの項目を１秒あたりに1回読み込むのに読み込みキャパシティユニットが2個必要。
４KBより大きい項目を1秒あたりに1回読み込む場合、追加の読み込みキャパシティユニットを消費する必要がある。
必要な最大数は、項目のサイズと結果整合性のある読み込み、または強力な整合性のある読み込みを維持するには読み込みキャパシティユニットが必要かどうかで異なる。
例えば項目のサイズが８KBの場合、1秒当たりの1回の強力な整合性のある読み込みを維持するには読み込みキャパシティユニットが2個、結果整合性もある読み込みを選択した場合は読み込みキャパシティが1個
またはトランザクション読み込みリクエストには読み込みキャパシティユニットが4個必要である。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

デプロイポリシーと設定

ローリング展開は[既存のインスタンス]にバッチでデプロイし、アプリケーションのログを保持する要件を満たす

ElasticBeanstalkはデプロイポリシーも含めデプロイを処理するいくつかのオプションを提供する

ローリングデプロイではElasticBeanstalk環境のEC2インスタンスを複数バッチに分割しアプリケーションの新しいバージョンを一度に１つのバッチにデプロイするため、
環境内の残りのインスタンスは古いアプリケーションバージョンを実行した状態になる。
つまりローリングデプロイ中はアプリケーションの古いバージョンでリクエストを処理するインスタンスもあり、新しいバージョンでリクエストを処理するインスタンスも存在する。

・新規インスタンスを起動する
	イミュータブル
	追加バッチによるローリング

・All at once 
	ロールバックを簡単にするのはローリングが一番適しているためここでは間違い

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

エクスポネンシャルバックオフアルゴリズム
	AWSでのネットワークレイテンシーなどの問題を解決するためのアルゴリズム

特定のリクエストの処理中にはDNSサーバやロードバランサーなど様々なコンポーネントが原因でエラーが発生する場合がある。
ネットワーク環境内でこれらのエラー応答を処理する一般的な手法としてはクライアントアプリケーションに再試行を実装する方法があげられる。
この手法によってアプリケーションの信頼性が向上し、開発者のオペレーションコストが軽減される。

単純な再試行に加えて各AWS SDKは効果的なフロー制御を行うために、エクスポネンシャルバックオフを実装する。
エクスポネンシャルバックオフは再試行時間の待機時間を累進的に長くして、連続的なエラー応答を受信するという考えに基づいている。
最大遅延間隔で最大回数の再試行を実行する必要がある。
再試行の最大遅延間隔と最大回数は必ずしも固定値ではなく、実行する操作や局所的な要因（ネットワークのレイテンシーなど）に基づいて設定する必要がある。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

LambdaをAmazonKinesisに使用する

LambdaはKinesisデータストリームのレコードを処理できる。
Kinesisでは多くのソースからデータを収集し、複数のコンシューマで処理することができる。
Lambdaでは標準データストリームイテレーターおよびHTTP/2ストリームコンシューマがサポートされている。
Lambdaはデータストリームからレコードを読み取り、ストリームレコードを含むイベントを使用して関数を同期的に呼び出します。
Lambdaはバッチのレコードを読み取り、関数を呼び出してバッチからレコードを処理する。

関数がエラーを返した場合、処理が成功するか、データの有効期限が切れるまでLambdaはバッチを再試行する。
この問題が解決されるまで、シャード内のデータは保存されない。
保留状態のシャードや潜在的なデータが生じないようにコードでエラーを処理及び記録する。

関数がレコードを処理するスピードを上げるには、データストリームにシャードを追加する。
Lambdaは各シャードのレコードを順序通りに処理し、関数がエラーを返した場合はシャード内の追加のレコード処理を停止する。
シャードが増えると一度に処理されるバッチが増えて、同時実行時のエラーの影響を下げることができる。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

