SQS　ロングポーリング
ロングポーリングはからのレスポンス数を減らし、メッセージが利用可能になり次第処理する。
合わせてＳＱＳのコスト削減に役立つ。


※ロングポーリングを使用したメッセージの消費
ReceiveMessage APIアクションの待機時間が０より大きい場合はロングポーリングが有効である。
ロングポーリングは空のレスポンスと偽の空のレスポンスの数を削減することでAmazonSQSのコストを削減する

利点
・レスポンスの送信前にメッセージがキューで使用可能になるまでSQSが待機できるように空のレスポンス数を削減する。
接続がタイムアウトしない限りReceiveMessageリクエストに対するレスポンスに使用可能なメッセージが少なくとも１つ、
最大でReceiveMessageアクションに指定されたメッセージ数まで含まれる
・サブセットではなくすべてのSQSサーバにクエリを実行して偽の空のレスポンスを減らす

ポイント
圧縮やメッセージを二つの部分に分けて送信するなど、サイズを小さくしてもポーリングのパフォーマンスは向上しない
ショートポーリングは遅延が発生する

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Lambda

LambdaAPIを使用して関数を更新するには関数コードを含むアーカイブを作成し、AWSCLIｗｐ使用してアップロードして
update-function-codeを使用して関数を更新する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

CloudWatchにおける高解像度のメトリクス

１０秒間隔の監視が必要である場合高解像度のメトリクスを使う必要がる

・詳細度が１分のデータを含む標準の解像度
・詳細度が１秒のデータを含む高解像度

ＡＷＳのサービスによって生成されたメトリクスはデフォルトで標準解像度になる
カスタムメトリクスを発行するときは標準解像度または高解像度のいずれかとして定義できる。
高解像度メトリクスを発行するとCloudWatchは１秒の解像度でそのメトリクスを保存する。
メトリクスは１秒、５秒、１０秒、３０秒、６０秒の倍数の期間で読み取り、および取得が可能

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB

グローバルセカンダリインデックスに対するプロビジョニング済みスループットに関する考慮事項
グローバルセカンダリインデックスを使用すると必要なプロジェクト属性を最小限に抑えて別のテーブルを作成できるため取得されるデータ量が少なくなる

※読み込みキャパシティユニット
グローバルセカンダリインデックスでは結果整合性のある読み込みをサポートしており、各読み込みで、読み込みキャパシティユニットの半分を消費する。
つまり、１回のグローバルセカンダリインデックスのクエリでは１読み込みキャパシティユニット当たり最大２ｘ４KB＝８KBを取り出すことができる

グローバルセカンダリインデックスのクエリの場合DynamoDBはプロビジョニングされた読み込みアクティビティを、テーブルに対するクエリと同じ方法で計算する。
唯一の違いはベーステーブル内の項目のサイズではなくインデックスエントリのサイズに基づいて計算が行われることっである。
読み込みキャパシティの数は返されたすべての項目について射影されたすべての属性のサイズの合計である。
結果は、次の４KB境界まで切り上げられる。

※グローバルセカンダリインデックス
アプリケーションによっては様々な属性をクエリ基準に使用して、いろいろな種類のクエリを実行する必要がある。このような要件に対応するために１つ以上の
グローバルセカンダリインデックスを作成してDynamoDBでそのインデックスに対応してクエリリクエストを発行できる。

※属性の射影
射影はテーブルからセカンダリインデックスにコピーされる属性セットである。テーブルのパーティションキーとソートキーは必ずインデックスに射影される。
アプリケーションのクエリ要件をサポートするためにほかの属性を射影することができる。インデックスのクエリを行うとDynamoDBは射影内の属性にそれらの属性
が独立したテーブル内にあるかのようにアクセスできる。

ポイント
エクスポネンシャルバックオフはエラー処理の戦略である。スロットリングエラーの戦略が必要。
ALBはDynamoDBの読み込みの負荷分散を提供しない。
RCUとWCUは別々に構成されるため相互に影響を与えることはない。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Cognito
開発者が認証したIDプールはすべてのデバイスでユーザの認証、識別に役立つ

※開発者が認証したIDプール
AmazonCognitoはFacebookIDプール、GoogleIDプール、およびLogin with AmazonIDプールを通じたウェブIDフェデレーションに加えて、開発者が認証したIDをサポートする。
開発者が認証したIDでは引き続きAmazonCognitoを使用してユーザデータを同期し、AWSリソースにアクセスしながら独自の既存認証プロセスを通じてユーザを登録、認証できる。
開発者が認証したIDの使用にはエンドユーザのデバイス、認証のバックエンド、AmazonCognito間の対話が関連する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

SQS

SQSは作業需要に応じて水平スケーリングの提供を容易にする。

※水平スケーリング
HTTPリクエスト応答プロトコルを使用してＳＱＳにアクセスするため要求のレイテンシー（リクエストの開始からレスポンスの受信までの時間）により、１回の接続を使用して
１つのスレッドを処理した場合のスループットは低下する、
例えばAmaozonEC2ベースのクライアントから同じリージョンにあるSQSへのレイテンシーが平均20ミリ秒の場合、1回の接続で1つのスレッドを処理した場合の最大スループットは平均で５０TPSになる。

水平スケーリングには全体的なキュースループットを高めるためにメッセージのプロデューサとコンシューマの数を増やすことが必要。
プロデューサ・・・SendMessageリクエスト生成
コンシューマ・・・ReceiveMessageリクエストとDeleteMessageリクエストを生成

水平スケーリングを行う方法
・クライアントあたりのスレッドの数を増やす
・クライアントを追加する
・クライアントあたりのスレッドの数を増やしてクライアントを追加する

クライアントを追加すると基本的にはキューのスループットも直線的に向上する、
例：クライアントの数を2倍にするとスループットも2倍になる


