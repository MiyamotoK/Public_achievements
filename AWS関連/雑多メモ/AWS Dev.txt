ElastiCache

ElastiCacheはバックエンドシステムの負荷を軽減することが出来る。
ELBのスティッキーセッションを無効にすることで弾力的なシステムを設計可能。

※セッションストア
AmazonElastiCache for Redis はユーザ認証トークン、セッションステートなどのセッション情報を管理するためのセッションストアとして適している。
セッションキーに必要なTTLを設定してElastiCache for Redisを使用することでセッション情報を管理する。
ゲーム、eコマースWebサイト、ソーシャルメディアプラットフォームといったオンラインアプリケーションでは一般的にセッション管理が必要になる。

ELBのスティッキーセッションを有効化すると弾力性が制限される。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

RDSかEC2の違いについて

オペレーティングシステムの特権を持つHAソリューションのデータベースを設計するためには2つの異なるアベイラビリティゾーンを利用する
レプリケーション構成のAmaozonEC2インスタンスを使用する。

【重要】RDSはオペレーティングシステムの特権を提供しない。＝自分で管理できない

HA＝High Availability
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
DynamoDB

読み込み書き込みキャパシティモード
2（１KBごとに１つ）ｘ　1000万件　/　3600ｓ　＝　5555.5
１つの書き込みCapacityUnitは最大でサイズが１KBまでの項目について１秒あたり1回の書き込みを表す。１KBより大きい項目を書き込む場合、DynamoDBは
追加のキャパシティUnitを消費する必要がある。たとえば項目サイズが２KBの場合ア１秒当たり１回の書き込みリクエストを維持するには書き込みキャパシティユニットが2個
またはトランザクション書き込みリクエストにはキャパシティユニットが4個必要。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

API Gateway 

メソッドリクエスト/レスポンス	：　フロントエンドの処理
統合リクエスト/レスポンス	：　バックエンドの処理

※APIGateway  REST API はリソースとメソッドで構成される。
リソースはリソースパスを介してアプリがアクセスできる論理エンティティを表す。
メソッドはAPIのユーザによって送信されるREST APIリクエストやユーザに返すレスポンスに対応している。

例：/incomesはアプリユーザの収益を表すリソースのパス。リソースには適切なHTTP動詞（GET,POST,PUT,PATCH,DELETEなど）によって定義されるオペレーションを１つ以上含めることが出来る。
　　リソースパスとオペレーションの組み合わせによってＡＰいのメソッドが識別される。
　　例えばPOST/incomesメソッドで呼び出し元が得た収益を追加し、GRT/expensesメソッドで呼び出し元によって報告済みの経費をクエリできる

　　アプリケーション側がリクエストされたデータの保存先及び取り込み先をバックエンドで把握する必要はない。API Gateway REST APIで、フロントエンドはメソッドリクエストとメソッドレスポンスによってカプセル化される。
　　APIは統合リクエストと統合レスポンスを使用してバックエンドと連結する。


例：DynamoDBをバックエンドとして使用した場合API開発者は受信するメソッドを選択されたバックエンドに転送するように統合リクエストを設定する。
　　この設定には適切なDynamoDBアクションの仕様、IAMロールとポリシー、及び必要な入力データ変換などがある。
　　バックエンドは統合レスポンスとしてAPI Gateway に結果を返す。
　　統合レスポンスをクライアントの（一定のHTTPステータスコードの）適切なメソッドレスポンスにルーティングするには統合からメソッドまで必要なレスポンスパラメータをマッピングするように統合レスポンスを設定できる。
　　その後、必要に応じてバックエンドの出力データ形式をフロントエンドの出力データ形式に変換する。
　　API Gateway を使用することでペイロードのスキーマまたはモデルを定義し、本文マッピングプレートを容易に設定できるようにする。

		ペイロード：通信・ネットワークの分野において、送受信されるデータの伝送単位（パケットやデータグラムなど）のうち、宛先などの制御情報を除いた、相手に送り届けようとしている正味のデータ本体のこと。

   ※API GatewayのREST API統合を設定する
	APIメソッドを設定したらバックエンドのエンドポイントに統合する必要がある。
	バックエンドのエンドポイントは統合エンドポイントとも呼ばれ、Lambda関数、HTTPウェブページ、またはAWSのサービスアクションとして使用できる。
	APIメソッドと同様にAPI統合には統合リクエストと統合レスポンスがある。
		統合リクエスト：バックエンドが受け取ったHTTPリクエストをカプセル化する。
				これはクライアントが送ったメソッドリクエストと同じ場合であれば異なる場合もある。
		統合レスポンス：バックエンドが返した出力をカプセル化するHTTPレスポンスである。

	統合リクエストの設定にはクライアントが送られたメソッドリクエストとをバックエンドに渡す方法の設定、必要に応じてリクエストデータを統合リクエストデータに変換する方法の設定
	呼び出すLambda関数の指定、受け取ったリクエストを転送するHTTPサーバの指定、呼び出すAWSのサービスアクションが含まれる。
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Lambda

Lambdaを使用する際のベストプラクティス
最小限のアクセス許可でIAMロールをLambda関数の実行ロールに割り当てること

LambdaAPIやリソース（関数やレイヤーなど）へのアクセスを管理するにはIAMを利用する
Lambdaを使用したアカウントやユーザのアプリケーションのアクセス許可はIAMユーザ、グループ、またはロールに適用できるアクセス許可ポリシーで管理する。
Lambdaリソースを使用する他のアカウントやAWSのサービスやリリースにアクセスするためのアクセス許可を付与する。
関数には少なくともログストリーミング用にAmazonCloudWatchLogsへのアクセス許可が必要である。

AWS X-Rayを使用して関数を追跡するか、AWS SDKで関数を使用してサービスにアクセスする場合は呼び出すためのアクセス許可を実行ロールで付与する。
またLambdaではイベントソースマッピングを使用して関数をトリガーする際にイベントソースから読み込むアクセス許可を取得するためにこの実行ロールを使用する。

※Lambda実行ロールを許可してS3バケットにアクセスするには
Lambda関数用に作成したIAMロールがバケットと同じAWSアカウントにある場合、IAMロールとバケットポリシーの両方でS3アクセス許可を付与する必要はない。
代わりにIAMロールのアクセス許可を付与できる。
バケットポリシーがLambda関数のロールへのアクセスを明示的に拒否されることを確認します。
例として以下の手順ではIAMロールのS3アクセス許可を付与する。
IAMロールとバケットが異なるアカウントにある場合、ＩＡＭロールとバケットポリシーの両方でＳ３アクセス許可を付与する必要がある。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

ElastiCache
フォールトトレラントでスケーラブルな方法でセッションデータを保存する理想的なストレージソリューションを提供し、アプリケーションをステートレスに設計することが出来る。

※Q:Memcached用Amazon ElastiCacheを使って何をキャッシュできるか。
永続データストアのコンテンツ（Amazon RDS,DynamoDB,またはEC2でホストされている自己管理型DBなど）から、Nginxなどで動的に生成されたウェブページや
永続的な保存を必要としない一時的なセッションデータに至るまで、サービスを使用して様々なオブジェクトをキャッシュできる。
また高周波カウンターを実装して、容量の大きいウェブアプリケーションにおける管理コントロールをデプロイするために使用することもできる。

・セッション状態を保存する間違った行動
CloudFrontにセッション状態を保存する。
S3にセッション状態を保存する
→AmazonCloudFrontとAmazonS3はセッション状態の理想的なストレージではない

ELBを使用してスティッキーセッションを有効にする
→セッション状態の理想的なストレージではない

※CLBのスティッキーセッションを設定する
デフォルトでは、CLBは負荷が最小の登録されたインスタンスに各リクエストを個別にルーティングする。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

ElasticBeanstalk

変更不可およびBlue/Greenデプロイは常に新しいインスタンスにアプリケーションをデプロイし、既存のインスタンスを使用しない

方法　　	　				コードのデプロイ先
All at once 				既存のインスタンス
ローリング					既存のインスタンス
Rolling with an additional batch	新規および既存のインスタンス
Immutable					新規のインスタンス
Trafic Splitting				新規のインスタンス
Blue/Green					新規のインスタンス

※Elastic Beanstalkは線形デプロイをサポートしない

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB

最大４００KBまでの項目サイズを扱うことができ、一貫したパフォーマンスを提供する

特徴
DynamoはKey-value及びドキュメントデータモデルをサポートするNoSQLデータベースで、開発者は数ペタバイトのデータや
１秒当たり数千万の読み込みおよび書き込みリクエストをサポートするために、小規模からグローバルまで開始できる
最新のサーバレスアプリケーションを構築できる
DynamoDBは仮想的なすべての規模のテーブルを水平スケーリングでサポートするkey-valueのドキュメントデータベースである。
これによりDynamoDBでは１日あたり１０兆以上のリクエストにスケーリングすることができる。
（ピーク時には１秒当たり２０００万件以上）

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

SQS　ロングポーリング
ロングポーリングはからのレスポンス数を減らし、メッセージが利用可能になり次第処理する。
合わせてＳＱＳのコスト削減に役立つ。


※ロングポーリングを使用したメッセージの消費
ReceiveMessage APIアクションの待機時間が０より大きい場合はロングポーリングが有効である。
ロングポーリングは空のレスポンスと偽の空のレスポンスの数を削減することでAmazonSQSのコストを削減する

利点
・レスポンスの送信前にメッセージがキューで使用可能になるまでSQSが待機できるように空のレスポンス数を削減する。
接続がタイムアウトしない限りReceiveMessageリクエストに対するレスポンスに使用可能なメッセージが少なくとも１つ、
最大でReceiveMessageアクションに指定されたメッセージ数まで含まれる
・サブセットではなくすべてのSQSサーバにクエリを実行して偽の空のレスポンスを減らす

ポイント
圧縮やメッセージを二つの部分に分けて送信するなど、サイズを小さくしてもポーリングのパフォーマンスは向上しない
ショートポーリングは遅延が発生する

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Lambda

LambdaAPIを使用して関数を更新するには関数コードを含むアーカイブを作成し、AWSCLIｗｐ使用してアップロードして
update-function-codeを使用して関数を更新する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

CloudWatchにおける高解像度のメトリクス

１０秒間隔の監視が必要である場合高解像度のメトリクスを使う必要がる

・詳細度が１分のデータを含む標準の解像度
・詳細度が１秒のデータを含む高解像度

ＡＷＳのサービスによって生成されたメトリクスはデフォルトで標準解像度になる
カスタムメトリクスを発行するときは標準解像度または高解像度のいずれかとして定義できる。
高解像度メトリクスを発行するとCloudWatchは１秒の解像度でそのメトリクスを保存する。
メトリクスは１秒、５秒、１０秒、３０秒、６０秒の倍数の期間で読み取り、および取得が可能

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB

グローバルセカンダリインデックスに対するプロビジョニング済みスループットに関する考慮事項
グローバルセカンダリインデックスを使用すると必要なプロジェクト属性を最小限に抑えて別のテーブルを作成できるため取得されるデータ量が少なくなる

※読み込みキャパシティユニット
グローバルセカンダリインデックスでは結果整合性のある読み込みをサポートしており、各読み込みで、読み込みキャパシティユニットの半分を消費する。
つまり、１回のグローバルセカンダリインデックスのクエリでは１読み込みキャパシティユニット当たり最大２ｘ４KB＝８KBを取り出すことができる

グローバルセカンダリインデックスのクエリの場合DynamoDBはプロビジョニングされた読み込みアクティビティを、テーブルに対するクエリと同じ方法で計算する。
唯一の違いはベーステーブル内の項目のサイズではなくインデックスエントリのサイズに基づいて計算が行われることっである。
読み込みキャパシティの数は返されたすべての項目について射影されたすべての属性のサイズの合計である。
結果は、次の４KB境界まで切り上げられる。

※グローバルセカンダリインデックス
アプリケーションによっては様々な属性をクエリ基準に使用して、いろいろな種類のクエリを実行する必要がある。このような要件に対応するために１つ以上の
グローバルセカンダリインデックスを作成してDynamoDBでそのインデックスに対応してクエリリクエストを発行できる。

※属性の射影
射影はテーブルからセカンダリインデックスにコピーされる属性セットである。テーブルのパーティションキーとソートキーは必ずインデックスに射影される。
アプリケーションのクエリ要件をサポートするためにほかの属性を射影することができる。インデックスのクエリを行うとDynamoDBは射影内の属性にそれらの属性
が独立したテーブル内にあるかのようにアクセスできる。

ポイント
エクスポネンシャルバックオフはエラー処理の戦略である。スロットリングエラーの戦略が必要。
ALBはDynamoDBの読み込みの負荷分散を提供しない。
RCUとWCUは別々に構成されるため相互に影響を与えることはない。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Cognito
開発者が認証したIDプールはすべてのデバイスでユーザの認証、識別に役立つ

※開発者が認証したIDプール
AmazonCognitoはFacebookIDプール、GoogleIDプール、およびLogin with AmazonIDプールを通じたウェブIDフェデレーションに加えて、開発者が認証したIDをサポートする。
開発者が認証したIDでは引き続きAmazonCognitoを使用してユーザデータを同期し、AWSリソースにアクセスしながら独自の既存認証プロセスを通じてユーザを登録、認証できる。
開発者が認証したIDの使用にはエンドユーザのデバイス、認証のバックエンド、AmazonCognito間の対話が関連する。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

SQS

SQSは作業需要に応じて水平スケーリングの提供を容易にする。

※水平スケーリング
HTTPリクエスト応答プロトコルを使用してＳＱＳにアクセスするため要求のレイテンシー（リクエストの開始からレスポンスの受信までの時間）により、１回の接続を使用して
１つのスレッドを処理した場合のスループットは低下する、
例えばAmaozonEC2ベースのクライアントから同じリージョンにあるSQSへのレイテンシーが平均20ミリ秒の場合、1回の接続で1つのスレッドを処理した場合の最大スループットは平均で５０TPSになる。

水平スケーリングには全体的なキュースループットを高めるためにメッセージのプロデューサとコンシューマの数を増やすことが必要。
プロデューサ・・・SendMessageリクエスト生成
コンシューマ・・・ReceiveMessageリクエストとDeleteMessageリクエストを生成

水平スケーリングを行う方法
・クライアントあたりのスレッドの数を増やす
・クライアントを追加する
・クライアントあたりのスレッドの数を増やしてクライアントを追加する

クライアントを追加すると基本的にはキューのスループットも直線的に向上する、
例：クライアントの数を2倍にするとスループットも2倍になる


～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB
プロビジョニングモードの読み込みキャパシティユニットと書き込みキャパシティユニット

トランザクションの読み込み毎秒100アイテム
各アイテムサイズ５KB
	→400の読み込みキャパシティユニット（RCU）が必要

トランザクション読み込みリクエストは４KBまでの項目を1秒あたりに1回読み込むのに読み込みキャパシティユニットが2個必要である→２RCU

５KBは８KB内に丸められるため読み込みキャパシティユニットが2個必要

よって100アイテム x (2RCU+2RCU) =400RCU

※プロビジョニングモードの読み込みキャパシティユニットと書き込みキャパシティユニット１つの読み込みキャパシティユニットは最大サイズ４KBの項目について1秒当たり1回の
強力な整合性のある読み込み、あるいは1秒当たり3回の結果整合性のある読みこみを表す。
トランザクション読み込みリクエストでは
４KBまでの項目を１秒あたりに1回読み込むのに読み込みキャパシティユニットが2個必要。
４KBより大きい項目を1秒あたりに1回読み込む場合、追加の読み込みキャパシティユニットを消費する必要がある。
必要な最大数は、項目のサイズと結果整合性のある読み込み、または強力な整合性のある読み込みを維持するには読み込みキャパシティユニットが必要かどうかで異なる。
例えば項目のサイズが８KBの場合、1秒当たりの1回の強力な整合性のある読み込みを維持するには読み込みキャパシティユニットが2個、結果整合性もある読み込みを選択した場合は読み込みキャパシティが1個
またはトランザクション読み込みリクエストには読み込みキャパシティユニットが4個必要である。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

デプロイポリシーと設定

ローリング展開は既存のインスタンスにバッチでデプロイし、アプリケーションのログを保持する要件を満たす

ElasticBeanstalkはデプロイポリシーも含めデプロイを処理するいくつかのオプションを提供する