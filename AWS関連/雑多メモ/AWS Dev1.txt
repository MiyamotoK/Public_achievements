ElastiCache

ElastiCacheはバックエンドシステムの負荷を軽減することが出来る。
ELBのスティッキーセッションを無効にすることで弾力的なシステムを設計可能。

※セッションストア
AmazonElastiCache for Redis はユーザ認証トークン、セッションステートなどのセッション情報を管理するためのセッションストアとして適している。
セッションキーに必要なTTLを設定してElastiCache for Redisを使用することでセッション情報を管理する。
ゲーム、eコマースWebサイト、ソーシャルメディアプラットフォームといったオンラインアプリケーションでは一般的にセッション管理が必要になる。

ELBのスティッキーセッションを有効化すると弾力性が制限される。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

RDSかEC2の違いについて

オペレーティングシステムの特権を持つHAソリューションのデータベースを設計するためには2つの異なるアベイラビリティゾーンを利用する
レプリケーション構成のAmaozonEC2インスタンスを使用する。

【重要】RDSはオペレーティングシステムの特権を提供しない。＝自分で管理できない

HA＝High Availability
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
DynamoDB

読み込み書き込みキャパシティモード
2（１KBごとに１つ）ｘ　1000万件　/　3600ｓ　＝　5555.5
１つの書き込みCapacityUnitは最大でサイズが１KBまでの項目について１秒あたり1回の書き込みを表す。１KBより大きい項目を書き込む場合、DynamoDBは
追加のキャパシティUnitを消費する必要がある。たとえば項目サイズが２KBの場合ア１秒当たり１回の書き込みリクエストを維持するには書き込みキャパシティユニットが2個
またはトランザクション書き込みリクエストにはキャパシティユニットが4個必要。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

API Gateway 

メソッドリクエスト/レスポンス	：　フロントエンドの処理
統合リクエスト/レスポンス	：　バックエンドの処理

※APIGateway  REST API はリソースとメソッドで構成される。
リソースはリソースパスを介してアプリがアクセスできる論理エンティティを表す。
メソッドはAPIのユーザによって送信されるREST APIリクエストやユーザに返すレスポンスに対応している。

例：/incomesはアプリユーザの収益を表すリソースのパス。リソースには適切なHTTP動詞（GET,POST,PUT,PATCH,DELETEなど）によって定義されるオペレーションを１つ以上含めることが出来る。
　　リソースパスとオペレーションの組み合わせによってＡＰいのメソッドが識別される。
　　例えばPOST/incomesメソッドで呼び出し元が得た収益を追加し、GRT/expensesメソッドで呼び出し元によって報告済みの経費をクエリできる

　　アプリケーション側がリクエストされたデータの保存先及び取り込み先をバックエンドで把握する必要はない。API Gateway REST APIで、フロントエンドはメソッドリクエストとメソッドレスポンスによってカプセル化される。
　　APIは統合リクエストと統合レスポンスを使用してバックエンドと連結する。


例：DynamoDBをバックエンドとして使用した場合API開発者は受信するメソッドを選択されたバックエンドに転送するように統合リクエストを設定する。
　　この設定には適切なDynamoDBアクションの仕様、IAMロールとポリシー、及び必要な入力データ変換などがある。
　　バックエンドは統合レスポンスとしてAPI Gateway に結果を返す。
　　統合レスポンスをクライアントの（一定のHTTPステータスコードの）適切なメソッドレスポンスにルーティングするには統合からメソッドまで必要なレスポンスパラメータをマッピングするように統合レスポンスを設定できる。
　　その後、必要に応じてバックエンドの出力データ形式をフロントエンドの出力データ形式に変換する。
　　API Gateway を使用することでペイロードのスキーマまたはモデルを定義し、本文マッピングプレートを容易に設定できるようにする。

		ペイロード：通信・ネットワークの分野において、送受信されるデータの伝送単位（パケットやデータグラムなど）のうち、宛先などの制御情報を除いた、相手に送り届けようとしている正味のデータ本体のこと。

   ※API GatewayのREST API統合を設定する
	APIメソッドを設定したらバックエンドのエンドポイントに統合する必要がある。
	バックエンドのエンドポイントは統合エンドポイントとも呼ばれ、Lambda関数、HTTPウェブページ、またはAWSのサービスアクションとして使用できる。
	APIメソッドと同様にAPI統合には統合リクエストと統合レスポンスがある。
		統合リクエスト：バックエンドが受け取ったHTTPリクエストをカプセル化する。
				これはクライアントが送ったメソッドリクエストと同じ場合であれば異なる場合もある。
		統合レスポンス：バックエンドが返した出力をカプセル化するHTTPレスポンスである。

	統合リクエストの設定にはクライアントが送られたメソッドリクエストとをバックエンドに渡す方法の設定、必要に応じてリクエストデータを統合リクエストデータに変換する方法の設定
	呼び出すLambda関数の指定、受け取ったリクエストを転送するHTTPサーバの指定、呼び出すAWSのサービスアクションが含まれる。
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

Lambda

Lambdaを使用する際のベストプラクティス
最小限のアクセス許可でIAMロールをLambda関数の実行ロールに割り当てること

LambdaAPIやリソース（関数やレイヤーなど）へのアクセスを管理するにはIAMを利用する
Lambdaを使用したアカウントやユーザのアプリケーションのアクセス許可はIAMユーザ、グループ、またはロールに適用できるアクセス許可ポリシーで管理する。
Lambdaリソースを使用する他のアカウントやAWSのサービスやリリースにアクセスするためのアクセス許可を付与する。
関数には少なくともログストリーミング用にAmazonCloudWatchLogsへのアクセス許可が必要である。

AWS X-Rayを使用して関数を追跡するか、AWS SDKで関数を使用してサービスにアクセスする場合は呼び出すためのアクセス許可を実行ロールで付与する。
またLambdaではイベントソースマッピングを使用して関数をトリガーする際にイベントソースから読み込むアクセス許可を取得するためにこの実行ロールを使用する。

※Lambda実行ロールを許可してS3バケットにアクセスするには
Lambda関数用に作成したIAMロールがバケットと同じAWSアカウントにある場合、IAMロールとバケットポリシーの両方でS3アクセス許可を付与する必要はない。
代わりにIAMロールのアクセス許可を付与できる。
バケットポリシーがLambda関数のロールへのアクセスを明示的に拒否されることを確認します。
例として以下の手順ではIAMロールのS3アクセス許可を付与する。
IAMロールとバケットが異なるアカウントにある場合、ＩＡＭロールとバケットポリシーの両方でＳ３アクセス許可を付与する必要がある。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

ElastiCache
フォールトトレラントでスケーラブルな方法でセッションデータを保存する理想的なストレージソリューションを提供し、アプリケーションをステートレスに設計することが出来る。

※Q:Memcached用Amazon ElastiCacheを使って何をキャッシュできるか。
永続データストアのコンテンツ（Amazon RDS,DynamoDB,またはEC2でホストされている自己管理型DBなど）から、Nginxなどで動的に生成されたウェブページや
永続的な保存を必要としない一時的なセッションデータに至るまで、サービスを使用して様々なオブジェクトをキャッシュできる。
また高周波カウンターを実装して、容量の大きいウェブアプリケーションにおける管理コントロールをデプロイするために使用することもできる。

・セッション状態を保存する間違った行動
CloudFrontにセッション状態を保存する。
S3にセッション状態を保存する
→AmazonCloudFrontとAmazonS3はセッション状態の理想的なストレージではない

ELBを使用してスティッキーセッションを有効にする
→セッション状態の理想的なストレージではない

※CLBのスティッキーセッションを設定する
デフォルトでは、CLBは負荷が最小の登録されたインスタンスに各リクエストを個別にルーティングする。

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

ElasticBeanstalk

変更不可およびBlue/Greenデプロイは常に新しいインスタンスにアプリケーションをデプロイし、既存のインスタンスを使用しない

方法　　	　				コードのデプロイ先
All at once 				既存のインスタンス
ローリング					既存のインスタンス
Rolling with an additional batch	新規および既存のインスタンス
Immutable					新規のインスタンス
Trafic Splitting				新規のインスタンス
Blue/Green					新規のインスタンス

※Elastic Beanstalkは線形デプロイをサポートしない

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～

DynamoDB

最大４００KBまでの項目サイズを扱うことができ、一貫したパフォーマンスを提供する

特徴
DynamoはKey-value及びドキュメントデータモデルをサポートするNoSQLデータベースで、開発者は数ペタバイトのデータや
１秒当たり数千万の読み込みおよび書き込みリクエストをサポートするために、小規模からグローバルまで開始できる
最新のサーバレスアプリケーションを構築できる
DynamoDBは仮想的なすべての規模のテーブルを水平スケーリングでサポートするkey-valueのドキュメントデータベースである。
これによりDynamoDBでは１日あたり１０兆以上のリクエストにスケーリングすることができる。
（ピーク時には１秒当たり２０００万件以上）

～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～